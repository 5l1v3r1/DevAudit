---
aspnet:
    -   id: 1
        title: ASP.NET version headers are enabled 
        tags: 
            -   CWE/200/Information Exposure
            -   OWASP-Top10-2013/A5/Security Misconfiguration
        severity: 1
        xpathtest: not(boolean(/configuration/system.web/httpRuntime[@enableVersionHeader='false']))
        summary: |
           By default the name and versions of the application frameworks an ASP.NET application uses are sent as response headers, like X-AspNetMvc-Version. 
           To avoid disclosing information that can be used by attackers it is recommended that these headers not be enabled.
        resolution: |
            Add the attribute enableVersionHeader=false to the httpRuntime element of the system.web section of the ASP.NET Web.config file.
        urls:
            -   https://www.troyhunt.com/shhh-dont-let-your-response-headers/

    -   id: 2
        title: ASP.NET custom errors mode is not enabled
        tags: 
            -   CWE/12/ASP.NET Misconfiguration/Missing Custom Error Page
            -   CWE/209/Information Exposure Through an Error Message
            -   OWASP-Top10-2013/A5/Security Misconfiguration
        severity: 2
        xpathtest: not(boolean(/configuration/system.web/customErrors)) | boolean(/configuration/system.web/customErrors[@mode='Off'])
        summary: |
           By default internal implementation information like control and data flow and variable handling and physical location of code files 
           is disclosed by ASP.NET to visitors when a runtime error is encountered and the default error handling page is used.
           This information should bever be disclosed in an application that is deployed as it will be exploited by attackers,
        resolution: |
            Add the customErrors element with the attribute Mode=On or Mode=RemoteOnly to the system.web section of the ASP.NET Web.config file.
            RemoteOnly will use the default error page for visitors on the local machine only.
        urls:
            -   https://www.troyhunt.com/owasp-top-10-for-net-developers-part-6/

    -   id: 3
        title: ASP.NET compilation is set to debug mode
        category: Information Disclosure 
        tags: 
            -   CWE/215/Information Exposure Through Debug Information
            -   CWE/11/ASP.NET Misconfiguration/Creating Debug Binary
            -   OWASP-Top10-2013/A5/Security Misconfiguration
        severity: 3
        enable-for-app-dev: false
        xpathtest: boolean(/configuration/system.web/compilation[@debug='true'])
        summary: |
           The ASP.NET application is compiled and run in debug mode. In a deployed application this can lead to information disclosure and vulnerabiliites due
           to settings and code used by developers being enabled in production.
           For maximum safety it is recommended that deployed ASP.NET applications not be run in debug mode
        resolution: |
            Set the debug attribute of the compilation element to false in the system.web section of the ASP.NET Web.config file. 
        urls:
            -   https://www.troyhunt.com/owasp-top-10-for-net-developers-part-6/
            -   https://weblogs.asp.net/scottgu/442448
            -   https://cwe.mitre.org/data/definitions/11.html

    -   id: 4
        title: ASP.NET tracing is enabled
        enable-for-app-dev: false
        tags: 
            -   CWE/200/Information Exposure
            -   CWE/497/Exposure of System Data to an Unauthorized Control Sphere
            -   OWASP-Top10-2013/A5/Security Misconfiguration
        severity: 3
        xpathtest: boolean(/configuration/system.web/trace[@enabled='true']) and not(boolean(/configuration/system.web/trace[@localOnly='true']))
        summary: |
           Tracing is enabled for the ASP.NET application. Detailed diagnostic and internal information is available at the trace.axd endpoint.
           This Information should never be disclosed in a deployed application as it will be exploited by attackers.
        resolution: |
            Set the enabled attribute of the trace element to false in the system.web section of the ASP.NET Web.config file. 
            Alternatively you can set the localOnly attribute of the trace element to true if you need tracing enabled for vistors on the local machine.
        urls:
            -   https://www.troyhunt.com/owasp-top-10-for-net-developers-part-6/
            -   https://weblogs.asp.net/scottgu/442448

    -   id: 5
        title: ASP.NET request validation is disabled globally
        tags: 
            -   CWE/554/ASP.NET Misconfiguration/Not Using Input Validation Framework
            -   OWASP-Top10-2013/A5/Security Misconfiguration
            -   OWASP-Top10-2013/A3/Cross-Site Scripting
        severity: 2
        xpathtest: boolean(/configuration/system.web/httpRuntime[@requestValidationMode='2.0']) and boolean(/configuration/system.web/pages[@validateRequest='false']))
        summary: |
           Request validation is disabled sitewide for the ASP.NET application. Request validation detects potentially malicous strings submitted by users to the server
           and aborts the request to mitigate potential XSS vulnerabilties. You should only disable request validation on specific pages and forms which do not need it,
           like forms that are designed to accept and submit HTML markup.  
        resolution: |
            Remove the requestValidationMode attribute from the httpRuntime element and the validateRequest element from the pages element of the Web.config file to revert to
            the default ASP.NEt 4 behaviour.
        urls:
            -   https://www.troyhunt.com/owasp-top-10-for-net-developers-part-6/

    -   id: 6
        title: ASP.NET hashing algorithm is insecure
        tags: 
            -   OWASP-Top10-2013/A5/Security Misconfiguration
            -   CWE/327/Use of a Broken or Risky Cryptographic Algorithm
        severity: 2
        xpathtest: boolean(/configuration/system.web/machineKey[@validation='MD5']) or boolean(/configuration/system.web/machineKey[@validation='SHA1'])
        summary: |
            ASP.NET uses encryption and hashing algorithms to help secure and make tamper-proof data such as form authentication cookies and view state. 
            By default, ASP.NET after version 4 uses the HMACSHA256 algorithm for hash operations. 
            Older hashing and encryption algorithms like MD5 and SHA1 are today considered cryptographically. 
            Compliance with standards like FIPS requires more secure hash algorithms like HMACSHA256 to be used.        
        resolution: |
            Set the validation attribute on the machineKey element of system.web in the Web.config file to HMACSHA256 or another secure hash algorithm. 
        urls:
            -   https://msdn.microsoft.com/library/w8h3skw9(v=vs.100).aspx

    -   id: 7
        title: ASP.NET does not require SSL for authentication cookies
        tags:
            -   CWE/614/Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
            -   CWE/311/Missing Encryption of Sensitive Data
            -   CWE/784/Reliance on Cookies without Validation and Integrity Checking in a Security Decision
            -   OWASP-Top10-2013/A5/Security Misconfiguration
            -   OWASP-Top10-2013/A6/Sensitive Data Disclosure
        severity: 3
        xpathtest: boolean(/configuration/system.web/authentication[@mode='Forms']) and not(boolean(/configuration/system.web/forms[@requireSSL='true']))
        summary: |
            ASP.NET uses the SSL protocol to encrypt sensitive data like form authentication cookies that must be transmitted on a public network.
            SSL should always be required for form authentication otherwise user sessions and identities in appliction are vulnerable to hijacking by attackers.
        resolution: |
            Set the requireSSL attribute to true in the forms element of the system.web element in the Web.config file.
            Note that additional steps are required to configure the IIS web server to use SSL, e.g 
            https://www.iis.net/learn/manage/configuring-security/how-to-set-up-ssl-on-iis
        urls:
            -   http://www.developerfusion.com/article/6745/top-10-application-security-vulnerabilities-in-webconfig-files-part-two/3/

    -   id: 8
        title: ASP.NET cookieless sessions are enabled
        tags: 
            -   OWASP-Top10-2013/A5/Security Misconfiguration
            -   OWASP-Top10-2013/A2/Broken Authentication and Session Management
        severity: 3
        xpathtest: boolean(/configuration/system.web/sessionState[@cookieless='true']) | boolean(/configuration/system.web/sessionState[@cookieless='UseUri'])
        summary: |
            ASP.NET uses cookies by default to store tokens and other related data that identifies user sessions that is not transmitted in plaintext and not normally visible to ordinary users. 
            If cookieless sessions are enabled this information is transmitted in an easily visible plaintext string that can be exploited by attackers.
            Unless absolutely necessary you shoud never enable cookieless sessions for your deployed or production applications.
        resolution: |
            Set the cookieless attribute to false in the sessionState element of the system.web element in the Web.config file.            
        urls:
            -   https://www.codeproject.com/Articles/18625/Top-Application-Security-Vulnerabilities-in-Web

    -   id: 9
        title: ASP.NET cookieless forms authentication is enabled
        tags: 
            -   CWE/523/Unprotected Transport of Credentials
            -   OWASP-Top10-2013/A2/Broken Authentication and Session Management
            -   OWASP-Top10-2013/A5/Security Misconfiguration
        severity: 3
        xpathtest: boolean(/configuration/system.web/authentication[@mode='Forms']) and boolean(/configuration/system.web/forms[@cookieless='UseUri'])
        summary: |
            Similar to cookieless sessions, if ASP.NET cookieless forms authentication is enabled then sensitive information is transmitted in an easily visible plaintext string 
            that can be exploited by attackers to hijack user authentication and identity. 
            Unless absolutely necessary you shoud never enable cookieless forms authentication for your deployed or production applications.
        resolution: |
            Set the cookieless attribute to false in the forms element of the system.web element in the Web.config file.            
        urls:
            -   https://www.codeproject.com/Articles/18625/Top-Application-Security-Vulnerabilities-in-Web
   
    -  id: 10
       title: ASP.NET cookies are accessible through client-side script in Internet Explorer
       tags: 
        -   CWE/1004/Sensitive Cookie Without 'HttpOnly' Flag
        -   OWASP-Top10-2013/A5/Security Misconfiguration
       severity: 2
       xpathtest: not(boolean(/configuration/system.web/httpCookies[@httpOnlyCookies='true']))
       summary: |
           Internet Explorer 6 and above contain a feature where ASP.NET and web applications can mark cookies as not accessible from client-side script.
           Protecting cookies used by ASP.NET applications for form view state and authentication from modification by client-side code 
           helps mitigate XSS attacks and attacks that attempt to impersonate users' identity using modified cookies used for authentication.            
           This property should always be used if available in the users' browser.
       resolution: |
           Set the httpOnlyCookies attribute to true in the httpCookies element of the system.web element in the Web.config file.            
       urls:
           -   http://www.developerfusion.com/article/6745/top-10-application-security-vulnerabilities-in-webconfig-files-part-two/2/